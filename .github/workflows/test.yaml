name: Test

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

jobs:
  check:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('poetry.lock') }}

      - name: Install Python poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
          virtualenvs-path: .venv

      - name: Install Dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --sync --no-interaction

      - name: Check Lint and Format
        run: poetry run task check

  test-ros2:
    strategy:
      fail-fast: false

      matrix:
        ros:
          - { distro: humble, os: ubuntu-22.04 }
          - { distro: jazzy, os: ubuntu-24.04 }
          - { distro: rolling, os: ubuntu-24.04 }

    runs-on: ${{ matrix.ros.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup ROS environment
        run: |
          sudo apt update -q
          sudo apt install -yqq curl

          keyring=/usr/share/keyrings/ros-archive-keyring.gpg
          codename=$(. /etc/os-release && echo $UBUNTU_CODENAME)
          sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o ${keyring}
          echo "deb [arch=$(dpkg --print-architecture) signed-by=${keyring}] http://packages.ros.org/ros2/ubuntu ${codename} main" |
            sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
          sudo apt update -q
          sudo apt install -yqq \
            ros-${{ matrix.ros.distro }}-ros-base \
            ros-${{ matrix.ros.distro }}-rclpy

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('poetry.lock') }}

      - name: Install Python poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
          virtualenvs-path: .venv

      - name: Install Dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --sync --no-interaction

      - name: Unit Test
        run: |
          source /opt/ros/${{ matrix.ros.distro }}/setup.bash
          poetry run task test
